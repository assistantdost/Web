from flask import Flask, render_template, request, session, url_for, redirect, jsonify
# import random
import login
from datetime import datetime, timedelta, timezone
import os
import json

app = Flask(__name__, template_folder='templates', static_folder='static')
flaskKEY = os.environ.get("flaskKEY")
app.config["SECRET_KEY"] = flaskKEY
app.config["SESSION_TYPE"] = "filesystem"


@app.context_processor
def utility_processor():

	with open("data.json") as file:
		appData = json.load(file)["app_data"]

	version = appData["version"]

	if "loginTime" in session:
		loginTime = session["loginTime"]
		now = datetime.now(timezone.utc)
		if now - loginTime > timedelta(minutes=30):
			session.clear()

	logged = "notLogged"

	if "username" in session:
		logged = "logged"

	ret = {"logged": logged, "version": version}

	return ret


@app.route("/", methods=["GET", "POST"])
def home():

	return render_template("index.html")


@app.route("/commands")
def cmds():

	return render_template("commands.html")


# @app.route("/try")
# def _try():
#     return render_template("try.html")


@app.route("/privacy-policy")
def privacy():
	return render_template("privacy policy.html")


@app.route("/terms-and-condition")
def terms():
	return render_template("terms and condition.html")


@app.route("/changelog")
def changelog():
	# return render_template("terms and condition.html")
	return "Hello"


@app.route("/about")
def about():

	return render_template("about.html")


@app.route("/download")
def download():

	return render_template("download.html")


@app.route("/login", methods=["GET", "POST"])
def loginC():

	if "username" in session:
		return redirect(url_for("account", login=True))

	invalid = False
	got = ""
	data = ""

	if request.method == "POST":
		got, data = login.login(request.form["email"], request.form["password"])

	if got == "invalid":
		invalid = True
	elif got == "logged":

		if "rememberMeCheck" in request.form:
			print("Remember Me")
		else:
			session["loginTime"] = datetime.now(timezone.utc)
			print("Dont remember me")

		session["username"] = data["user"]

		# return redirect(url_for("account", login=True))
		return redirect(url_for("home", login=True))

	return render_template("login.html", invalid=invalid)


@app.route("/register", methods=["GET", "POST"])
def register():

	if "username" in session:
		return redirect(url_for("account", login=True))

	if request.method == "POST":
		name = request.form["fname"].strip()
		user = request.form["uname"].strip()
		email = request.form["email"].strip()
		pass1 = request.form["password"].strip()

		get, data = login.register(name, user, email, pass1)

		if get == "invalid":
			return render_template("register.html", invalid=data)

		if get == "register":
			return render_template("login.html")

	return render_template("register.html")


@app.route("/account")
def account():

	if "username" in session:
		print(session)
		return render_template("account.html", login=True)

	return redirect(url_for("loginC"))


@app.get("/hello")
def read_root():
	username = session['username']
	return {"Hello": session}


@app.route("/logout")
def logout():

	if "username" in session:
		session.clear()

		return redirect(url_for("home"))


@app.route("/status")
def status():

	return redirect("https://statuspage.freshping.io/66639-DOST")


@app.route("/suggestion_data", methods=["POST"])
def process():
	try:
		data = request.get_json()
		print(data["data"])

		return "Hello"
	except:
		return render_template('404.html'), 404


# Get Process Send
@app.route('/process_data')
def get_user():

	user = request.args.get("data")
	if not user:
		return render_template('404.html'), 404

	post = login.check_user(user)
	data = {'post': post}
	return jsonify(data)


@app.errorhandler(404)
def page_not_found(e):
	return render_template('404.html'), 404


def run():
	app.run(host='0.0.0.0', port=8080, debug=True)


if __name__ == "__main__":
	run()
